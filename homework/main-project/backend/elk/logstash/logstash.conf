input {
    #데이터 베이스의 먼저 접속
    jdbc {
        #### 1단계 => 문제점 : 매번 똑같은 데이터를 계속 가지고옴.
        # jdbc_driver_library => "/usr/share/logstash/mysql-connector-java-8.0.28.jar" 
        # jdbc_driver_class => "com.mysql.cj.jdbc.Driver"
        # jdbc_connection_string => "jdbc:mysql://my-database:3306/mydocker02"
        # jdbc_user => "root"
        # jdbc_password => "root"
        # schedule => "* * * * *"  # 언제 한번씩 실행시킬 것인가를 정함 // 분 시간 일 월 요일
        # statement => "select * from product" # 저 위에로 접속을 해서 이 쿼리를 날리고 그 결과물은 밑으로~~
        
        #####2단계 #####
        # jdbc_driver_library => "/usr/share/logstash/mysql-connector-java-8.0.28.jar" 
        # jdbc_driver_class => "com.mysql.cj.jdbc.Driver"
        # jdbc_connection_string => "jdbc:mysql://my-database:3306/mydocker02"
        # jdbc_user => "root"
        # jdbc_password => "root"
        # schedule => "* * * * *"  # 언제 한번씩 실행시킬 것인가를 정함 // 분 시간 일 월 요일
        # use_column_value => true  # 칼럼을 사용하겠다.
        # tracking_column => "updatedat"  # 어떤 칼럼을 추적할거니?
        # tracking_column_type => "timestamp" # 그래서 그 칼럼의 타입이 뭔데?(시간이니까 timestamp)
        # last_run_metadata_path => "./aaa.txt" # txt파일 하나 만들어지고, 마지막에 실행된 파일이 저장이 된다. 
        # statement => "select id, name, price, updatedat from product where updatedAt > :sql_last_value order by updatedat asc" # 중복저장을 피해서 전에 막 저장된 값을 쓰겠다!!(:sql_last_value), asc는(최근것이 마지막에 와야함)
        # 위에 4개를 조회해서 엘라스틱에 넣고 updatedat은 txt에 넣는다. txt에 넣은 이유는 다음 sql쿼리문 날릴때 그 값을 사용 할거라서.


        #####3단계 #####
        jdbc_driver_library => "/usr/share/logstash/mysql-connector-java-8.0.28.jar" 
        jdbc_driver_class => "com.mysql.cj.jdbc.Driver"
        jdbc_connection_string => "jdbc:mysql://my-database:3306/myproject00"
        jdbc_user => "root"
        jdbc_password => "root"
        schedule => "* * * * *"  # 언제 한번씩 실행시킬 것인가를 정함 // 분 시간 일 월 요일
        use_column_value => true
        tracking_column => "updatedat" # 어떤 칼럼을 추적할거니?
        tracking_column_type => "numeric" # 뉴메릭 타입
        last_run_metadata_path => "./accomodationList.txt" # txt파일 하나 만들어지고, 마지막에 실행된 파일이 저장이 된다. 
        statement => "select id, house_name, price, unix_timestamp(updatedat) as updatedat from rent where unix_timestamp(updatedat) > :sql_last_value order by updatedat asc" # asc 최근것이 마지막에. 
        # unix_timestamp : 숫자로 바꿔버리는 개념
    }
}

output {
    elasticsearch {
        hosts => "elasticsearch:9200" # 여기에 저 결과물을 넣어준다.
        index => "accomodation"
        template => "/usr/share/logstash/search_template.json"
        template_name => "accomodation_search"
        template_overwrite => true
    }
}